<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carrito {{cid}} - Mi Tienda</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <div class="cart-container">
        <!-- Encabezado del carrito -->
        <div class="cart-header">
            <h1 class="cart-title"><i class="fas fa-shopping-cart"></i> Mi Carrito</h1>
            <span class="cart-id">ID: {{cid}}</span>
        </div>
        
        {{#if cart.products.length}}
        <!-- Lista de productos en el carrito -->
        <div class="cart-items">
            {{#each cart.products}}
            <div class="cart-item" data-product-id="{{this.product._id}}">
                <div class="item-image">
                    <img src="{{this.product.thumbnails.[0]}}" alt="{{this.product.title}}">
                </div>
                <div class="item-details">
                    <h3 class="item-title">{{this.product.title}}</h3>
                    <p class="item-price">${{this.product.price}} c/u</p>
                    
                    <!-- Cantidad estática (sin botones de modificación) -->
                    <div class="item-quantity">
                        <span class="quantity-label">Cantidad:</span>
                        <span class="quantity-value">{{this.quantity}}</span>
                    </div>
                    
                    <p class="item-total">Total: ${{this.subtotal}}</p>
                </div>
                
                <button class="remove-item-btn" data-product-id="{{this.product._id}}">
                    <i class="fas fa-trash-alt"></i> 
                </button>
            </div>
            {{/each}}
        </div>
        
        <!-- Resumen del carrito (se mantiene igual) -->
        <div class="cart-summary">
            <div class="summary-row">
                <span>Subtotal:</span>
                <span>${{summary.subtotal}}</span>
            </div>
            <div class="summary-row">
                <span>Envío:</span>
                <span>${{summary.shipping}}</span>
            </div>
            <div class="summary-row total">
                <span>Total:</span>
                <span>${{summary.total}}</span>
            </div>
        </div>
        
        <!-- Acciones del carrito -->
        <div class="cart-actions">
            <a href="/" class="cart-btn btn-continue">
                <i class="fas fa-arrow-left"></i> Seguir Comprando
            </a>
            <button class="cart-btn btn-empty-cart">
                <i class="fas fa-trash"></i> Vaciar Carrito
            </button>
            <a href="/carts/{{cid}}/purchase" class="cart-btn btn-checkout">
                <i class="fas fa-credit-card"></i> Finalizar Compra
            </a>
        </div>
        {{else}}
        <!-- Carrito vacío (se mantiene igual) -->
        <div class="empty-cart">
            <div class="empty-cart-icon">
                <i class="fas fa-shopping-cart fa-4x"></i>
            </div>
            <p class="empty-cart-message">Tu carrito está vacío</p>
            <a href="/" class="btn-shop">
                <i class="fas fa-store"></i> Ir al Inicio
            </a>
        </div>
        {{/if}}
    </div>

    <!-- Script del carrito - VERSIÓN CORREGIDA -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Eliminar producto individual - CON MÁS VERIFICACIONES
            document.querySelectorAll('.remove-item-btn').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const button = e.target.closest('.remove-item-btn');
                    if (!button) return;
                    
                    const productId = button.getAttribute('data-product-id');
                    if (!productId) {
                        console.error('No se encontró el ID del producto');
                        return;
                    }

                    try {
                        const response = await fetch(`/api/carts/{{cid}}/products/${productId}`, {
                            method: 'DELETE'
                        });
                        
                        if (response.ok) {
                            // Versión más robusta para encontrar el elemento padre
                            const cartItem = button.closest('.cart-item');
                            if (cartItem) {
                                // Agregar animación de desvanecimiento
                                cartItem.style.transition = 'opacity 0.3s';
                                cartItem.style.opacity = '0';
                                
                                setTimeout(() => {
                                    cartItem.remove();
                                    location.reload(); // Recargar para actualizar totales
                                }, 300);
                            } else {
                                console.warn('No se encontró el elemento .cart-item, recargando página');
                                location.reload();
                            }
                        } else {
                            const error = await response.json();
                            showNotification(`Error: ${error.message}`, true);
                        }
                    } catch (error) {
                        console.error('Error al eliminar producto:', error);
                        showNotification('Error al eliminar el producto', true);
                    }
                });
            });
            
            // Vaciar carrito completo (se mantiene igual)
            const emptyCartBtn = document.querySelector('.btn-empty-cart');
            if (emptyCartBtn) {
                emptyCartBtn.addEventListener('click', async () => {
                    if (confirm('¿Estás seguro que deseas vaciar todo el carrito?')) {
                        try {
                            const response = await fetch(`/api/carts/{{cid}}`, {
                                method: 'DELETE'
                            });
                            
                            if (response.ok) {
                                showNotification('Carrito vaciado correctamente');
                                setTimeout(() => location.reload(), 1000);
                            } else {
                                const error = await response.json();
                                showNotification(`Error: ${error.message}`, true);
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            showNotification('Error al vaciar el carrito', true);
                        }
                    }
                });
            }
            
            // Función mejorada de notificación
            function showNotification(message, isError = false) {
                // Crear notificación si no existe
                let notification = document.getElementById('notification');
                if (!notification) {
                    notification = document.createElement('div');
                    notification.id = 'notification';
                    notification.style.position = 'fixed';
                    notification.style.top = '20px';
                    notification.style.right = '20px';
                    notification.style.padding = '15px';
                    notification.style.color = 'white';
                    notification.style.borderRadius = '5px';
                    notification.style.zIndex = '1000';
                    notification.style.display = 'none';
                    document.body.appendChild(notification);
                }
                
                notification.textContent = message;
                notification.style.backgroundColor = isError ? '#dc3545' : '#28a745';
                notification.style.display = 'block';
                
                setTimeout(() => {
                    notification.style.opacity = '0';
                    setTimeout(() => {
                        notification.style.display = 'none';
                        notification.style.opacity = '1';
                    }, 300);
                }, 3000);
            }
        });
    </script>
</body>
</html>